syntax = "proto3";

package engine;

service EngineService {
  // Core processing operations
  rpc ProcessRequest (ProcessRequestMessage) returns (ProcessResponseMessage) {}
  rpc GetStatus (GetStatusRequest) returns (ProcessResponseMessage) {}
  rpc CancelRequest (CancelRequestMessage) returns (CancelResponseMessage) {}
  
  // Batch processing
  rpc ProcessBatch (ProcessBatchRequestMessage) returns (ProcessBatchResponseMessage) {}
  rpc GetBatchStatus (GetBatchStatusRequest) returns (GetBatchStatusResponse) {}
  
  // Configuration management
  rpc GetEngineConfig (GetEngineConfigRequest) returns (GetEngineConfigResponse) {}
  rpc UpdateEngineConfig (UpdateEngineConfigRequest) returns (UpdateEngineConfigResponse) {}
  
  // Engine status and monitoring
  rpc GetEngineStatus (GetEngineStatusRequest) returns (GetEngineStatusResponse) {}
  rpc GetEngineMetrics (GetEngineMetricsRequest) returns (GetEngineMetricsResponse) {}
}

// Core processing messages
message ProcessRequestMessage {
  string id = 1;
  string request_type = 2;
  bytes data = 3;
  string timestamp = 4;
  map<string, string> metadata = 5;
  ProcessingOptions options = 6;
}

message ProcessingOptions {
  int32 priority = 1; // 1-10, higher is more important
  int32 timeout = 2; // in seconds
  bool async = 3;
  string callback_url = 4;
  repeated string required_resources = 5;
}

message GetStatusRequest {
  string id = 1;
}

message ProcessResponseMessage {
  string id = 1;
  string status = 2; // "pending", "processing", "completed", "failed", "cancelled"
  bytes result = 3;
  string timestamp = 4;
  bool success = 5;
  string error = 6;
  map<string, string> metadata = 7;
  ProcessingMetrics metrics = 8;
}

message ProcessingMetrics {
  int32 processing_time_ms = 1;
  int32 queue_time_ms = 2;
  int32 memory_used_mb = 3;
  float cpu_usage_percent = 4;
}

message CancelRequestMessage {
  string id = 1;
  string reason = 2;
}

message CancelResponseMessage {
  bool success = 1;
  string message = 2;
  string error = 3;
}

// Batch processing messages
message ProcessBatchRequestMessage {
  string batch_id = 1;
  repeated ProcessRequestMessage requests = 2;
  BatchProcessingOptions options = 3;
}

message BatchProcessingOptions {
  bool fail_fast = 1; // Stop on first error
  bool parallel = 2; // Process in parallel
  int32 max_concurrent = 3; // Max concurrent requests if parallel
  int32 timeout = 4; // Overall batch timeout in seconds
}

message ProcessBatchResponseMessage {
  string batch_id = 1;
  bool success = 2;
  string status = 3; // "pending", "processing", "completed", "failed", "cancelled"
  string error = 4;
  int32 total_requests = 5;
  int32 completed_requests = 6;
  int32 failed_requests = 7;
}

message GetBatchStatusRequest {
  string batch_id = 1;
  bool include_results = 2;
}

message GetBatchStatusResponse {
  string batch_id = 1;
  bool success = 2;
  string status = 3;
  string error = 4;
  int32 total_requests = 5;
  int32 completed_requests = 6;
  int32 failed_requests = 7;
  repeated ProcessResponseMessage results = 8;
  BatchProcessingMetrics metrics = 9;
}

message BatchProcessingMetrics {
  int32 total_processing_time_ms = 1;
  int32 average_processing_time_ms = 2;
  int32 max_processing_time_ms = 3;
  int32 min_processing_time_ms = 4;
}

// Configuration management messages
message GetEngineConfigRequest {}

message GetEngineConfigResponse {
  bool success = 1;
  EngineConfig config = 2;
  string error = 3;
}

message UpdateEngineConfigRequest {
  EngineConfig config = 1;
}

message UpdateEngineConfigResponse {
  bool success = 1;
  EngineConfig config = 2;
  string error = 3;
}

message EngineConfig {
  int32 max_concurrent_requests = 1;
  int32 default_timeout = 2;
  int32 max_request_size_bytes = 3;
  int32 max_batch_size = 4;
  map<string, string> resource_limits = 5;
  map<string, string> feature_flags = 6;
}

// Engine status and monitoring messages
message GetEngineStatusRequest {}

message GetEngineStatusResponse {
  bool success = 1;
  EngineStatus status = 2;
  string error = 3;
}

message EngineStatus {
  string version = 1;
  string status = 2; // "running", "starting", "stopping", "degraded", "maintenance"
  int32 uptime_seconds = 3;
  int32 active_requests = 4;
  int32 queued_requests = 5;
  int32 completed_requests = 6;
  int32 failed_requests = 7;
  ResourceUtilization resources = 8;
  map<string, string> environment = 9;
}

message ResourceUtilization {
  float cpu_usage_percent = 1;
  int32 memory_usage_mb = 2;
  int32 disk_usage_mb = 3;
  int32 network_rx_kbps = 4;
  int32 network_tx_kbps = 5;
}

message GetEngineMetricsRequest {
  string start_time = 1;
  string end_time = 2;
  string metric_type = 3; // "performance", "requests", "errors", "resources", "all"
  int32 resolution = 4; // data points in seconds (60, 300, 3600)
}

message GetEngineMetricsResponse {
  bool success = 1;
  repeated MetricPoint metrics = 2;
  string error = 3;
}

message MetricPoint {
  string timestamp = 1;
  string metric_name = 2;
  double value = 3;
  map<string, string> labels = 4;
}
