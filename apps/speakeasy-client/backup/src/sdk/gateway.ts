/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { gatewayGatewayControllerGetEngineStatus } from "../funcs/gatewayGatewayControllerGetEngineStatus.js";
import { gatewayGatewayControllerHealthCheck } from "../funcs/gatewayGatewayControllerHealthCheck.js";
import { gatewayGatewayControllerProcessEngineRequest } from "../funcs/gatewayGatewayControllerProcessEngineRequest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import * as shared from "../models/shared/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Gateway extends ClientSDK {
  /**
   * Get engine process status
   *
   * @remarks
   * Retrieves the status of a previously submitted engine process request
   */
  async gatewayControllerGetEngineStatus(
    id: string,
    options?: RequestOptions,
  ): Promise<operations.GatewayControllerGetEngineStatusResponse> {
    return unwrapAsync(gatewayGatewayControllerGetEngineStatus(
      this,
      id,
      options,
    ));
  }

  /**
   * Health check
   *
   * @remarks
   * Check if the API gateway is running properly
   */
  async gatewayControllerHealthCheck(
    options?: RequestOptions,
  ): Promise<operations.GatewayControllerHealthCheckResponse> {
    return unwrapAsync(gatewayGatewayControllerHealthCheck(
      this,
      options,
    ));
  }

  /**
   * Process an engine request
   *
   * @remarks
   * Sends a request to the engine service for processing
   */
  async gatewayControllerProcessEngineRequest(
    request: shared.ProcessRequestDto,
    options?: RequestOptions,
  ): Promise<operations.GatewayControllerProcessEngineRequestResponse> {
    return unwrapAsync(gatewayGatewayControllerProcessEngineRequest(
      this,
      request,
      options,
    ));
  }
}
