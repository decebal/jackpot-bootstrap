/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HealthCheckResponse = {
  /**
   * The status of the service
   */
  status: string;
  /**
   * The current timestamp
   */
  timestamp: string;
};

/** @internal */
export const HealthCheckResponse$inboundSchema: z.ZodType<
  HealthCheckResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  timestamp: z.string(),
});

/** @internal */
export type HealthCheckResponse$Outbound = {
  status: string;
  timestamp: string;
};

/** @internal */
export const HealthCheckResponse$outboundSchema: z.ZodType<
  HealthCheckResponse$Outbound,
  z.ZodTypeDef,
  HealthCheckResponse
> = z.object({
  status: z.string(),
  timestamp: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthCheckResponse$ {
  /** @deprecated use `HealthCheckResponse$inboundSchema` instead. */
  export const inboundSchema = HealthCheckResponse$inboundSchema;
  /** @deprecated use `HealthCheckResponse$outboundSchema` instead. */
  export const outboundSchema = HealthCheckResponse$outboundSchema;
  /** @deprecated use `HealthCheckResponse$Outbound` instead. */
  export type Outbound = HealthCheckResponse$Outbound;
}

export function healthCheckResponseToJSON(
  healthCheckResponse: HealthCheckResponse,
): string {
  return JSON.stringify(
    HealthCheckResponse$outboundSchema.parse(healthCheckResponse),
  );
}

export function healthCheckResponseFromJSON(
  jsonString: string,
): SafeParseResult<HealthCheckResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HealthCheckResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HealthCheckResponse' from JSON`,
  );
}
