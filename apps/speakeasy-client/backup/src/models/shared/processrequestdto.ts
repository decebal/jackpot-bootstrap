/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Data payload to be processed
 */
export type Data = {};

export type ProcessRequestDto = {
  /**
   * Data payload to be processed
   */
  data: Data;
  /**
   * Unique identifier for the process request
   */
  id: string;
  /**
   * Optional timestamp for the request
   */
  timestamp?: string | undefined;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const ProcessRequestDto$inboundSchema: z.ZodType<
  ProcessRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
  id: z.string(),
  timestamp: z.string().optional(),
});

/** @internal */
export type ProcessRequestDto$Outbound = {
  data: Data$Outbound;
  id: string;
  timestamp?: string | undefined;
};

/** @internal */
export const ProcessRequestDto$outboundSchema: z.ZodType<
  ProcessRequestDto$Outbound,
  z.ZodTypeDef,
  ProcessRequestDto
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
  id: z.string(),
  timestamp: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessRequestDto$ {
  /** @deprecated use `ProcessRequestDto$inboundSchema` instead. */
  export const inboundSchema = ProcessRequestDto$inboundSchema;
  /** @deprecated use `ProcessRequestDto$outboundSchema` instead. */
  export const outboundSchema = ProcessRequestDto$outboundSchema;
  /** @deprecated use `ProcessRequestDto$Outbound` instead. */
  export type Outbound = ProcessRequestDto$Outbound;
}

export function processRequestDtoToJSON(
  processRequestDto: ProcessRequestDto,
): string {
  return JSON.stringify(
    ProcessRequestDto$outboundSchema.parse(processRequestDto),
  );
}

export function processRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<ProcessRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProcessRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProcessRequestDto' from JSON`,
  );
}
