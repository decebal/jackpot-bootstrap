/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The result of the processing
 */
export type Result = {};

export type EngineProcessResponse = {
  /**
   * Error message if processing failed
   */
  error?: string | undefined;
  /**
   * The ID of the processed request
   */
  id: string;
  /**
   * The result of the processing
   */
  result: Result;
  /**
   * Indicates if the request was processed successfully
   */
  success: boolean;
};

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Result$Outbound = {};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const EngineProcessResponse$inboundSchema: z.ZodType<
  EngineProcessResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string().optional(),
  id: z.string(),
  result: z.lazy(() => Result$inboundSchema),
  success: z.boolean(),
});

/** @internal */
export type EngineProcessResponse$Outbound = {
  error?: string | undefined;
  id: string;
  result: Result$Outbound;
  success: boolean;
};

/** @internal */
export const EngineProcessResponse$outboundSchema: z.ZodType<
  EngineProcessResponse$Outbound,
  z.ZodTypeDef,
  EngineProcessResponse
> = z.object({
  error: z.string().optional(),
  id: z.string(),
  result: z.lazy(() => Result$outboundSchema),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EngineProcessResponse$ {
  /** @deprecated use `EngineProcessResponse$inboundSchema` instead. */
  export const inboundSchema = EngineProcessResponse$inboundSchema;
  /** @deprecated use `EngineProcessResponse$outboundSchema` instead. */
  export const outboundSchema = EngineProcessResponse$outboundSchema;
  /** @deprecated use `EngineProcessResponse$Outbound` instead. */
  export type Outbound = EngineProcessResponse$Outbound;
}

export function engineProcessResponseToJSON(
  engineProcessResponse: EngineProcessResponse,
): string {
  return JSON.stringify(
    EngineProcessResponse$outboundSchema.parse(engineProcessResponse),
  );
}

export function engineProcessResponseFromJSON(
  jsonString: string,
): SafeParseResult<EngineProcessResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EngineProcessResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EngineProcessResponse' from JSON`,
  );
}
