/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GatewayControllerGetEngineStatusRequest = {
  /**
   * The ID of the process request to check
   */
  id: string;
};

export type GatewayControllerGetEngineStatusResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Status retrieved successfully
   */
  engineStatusResponse?: shared.EngineStatusResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GatewayControllerGetEngineStatusRequest$inboundSchema: z.ZodType<
  GatewayControllerGetEngineStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GatewayControllerGetEngineStatusRequest$Outbound = {
  id: string;
};

/** @internal */
export const GatewayControllerGetEngineStatusRequest$outboundSchema: z.ZodType<
  GatewayControllerGetEngineStatusRequest$Outbound,
  z.ZodTypeDef,
  GatewayControllerGetEngineStatusRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GatewayControllerGetEngineStatusRequest$ {
  /** @deprecated use `GatewayControllerGetEngineStatusRequest$inboundSchema` instead. */
  export const inboundSchema =
    GatewayControllerGetEngineStatusRequest$inboundSchema;
  /** @deprecated use `GatewayControllerGetEngineStatusRequest$outboundSchema` instead. */
  export const outboundSchema =
    GatewayControllerGetEngineStatusRequest$outboundSchema;
  /** @deprecated use `GatewayControllerGetEngineStatusRequest$Outbound` instead. */
  export type Outbound = GatewayControllerGetEngineStatusRequest$Outbound;
}

export function gatewayControllerGetEngineStatusRequestToJSON(
  gatewayControllerGetEngineStatusRequest:
    GatewayControllerGetEngineStatusRequest,
): string {
  return JSON.stringify(
    GatewayControllerGetEngineStatusRequest$outboundSchema.parse(
      gatewayControllerGetEngineStatusRequest,
    ),
  );
}

export function gatewayControllerGetEngineStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GatewayControllerGetEngineStatusRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GatewayControllerGetEngineStatusRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GatewayControllerGetEngineStatusRequest' from JSON`,
  );
}

/** @internal */
export const GatewayControllerGetEngineStatusResponse$inboundSchema: z.ZodType<
  GatewayControllerGetEngineStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  EngineStatusResponse: shared.EngineStatusResponse$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "EngineStatusResponse": "engineStatusResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GatewayControllerGetEngineStatusResponse$Outbound = {
  ContentType: string;
  EngineStatusResponse?: shared.EngineStatusResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GatewayControllerGetEngineStatusResponse$outboundSchema: z.ZodType<
  GatewayControllerGetEngineStatusResponse$Outbound,
  z.ZodTypeDef,
  GatewayControllerGetEngineStatusResponse
> = z.object({
  contentType: z.string(),
  engineStatusResponse: shared.EngineStatusResponse$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    engineStatusResponse: "EngineStatusResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GatewayControllerGetEngineStatusResponse$ {
  /** @deprecated use `GatewayControllerGetEngineStatusResponse$inboundSchema` instead. */
  export const inboundSchema =
    GatewayControllerGetEngineStatusResponse$inboundSchema;
  /** @deprecated use `GatewayControllerGetEngineStatusResponse$outboundSchema` instead. */
  export const outboundSchema =
    GatewayControllerGetEngineStatusResponse$outboundSchema;
  /** @deprecated use `GatewayControllerGetEngineStatusResponse$Outbound` instead. */
  export type Outbound = GatewayControllerGetEngineStatusResponse$Outbound;
}

export function gatewayControllerGetEngineStatusResponseToJSON(
  gatewayControllerGetEngineStatusResponse:
    GatewayControllerGetEngineStatusResponse,
): string {
  return JSON.stringify(
    GatewayControllerGetEngineStatusResponse$outboundSchema.parse(
      gatewayControllerGetEngineStatusResponse,
    ),
  );
}

export function gatewayControllerGetEngineStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GatewayControllerGetEngineStatusResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GatewayControllerGetEngineStatusResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GatewayControllerGetEngineStatusResponse' from JSON`,
  );
}
